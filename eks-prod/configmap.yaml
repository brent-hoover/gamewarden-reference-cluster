flux:
  interval: 2m
  rollback:
    cleanupOnFail: false

# Network policies work well with Cilium
networkPolicies:
  enabled: true

# Core platform components
istio:
  sourceType: helmRepo
  enabled: true
  values:
    # AWS-specific Istio configurations
    meshConfig:
      defaultConfig:
        proxyStatsMatcher:
          inclusionRegexps:
          - ".*outlier_detection.*"
          - ".*osconfig.*"
          - ".*rbac.*"
    gateways:
      istio-ingressgateway:
        serviceAnnotations:
          # Use AWS NLB for better performance
          service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
          service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
          service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"

istioOperator:
  sourceType: helmRepo
  enabled: true

monitoring:
  sourceType: helmRepo
  enabled: true
  values:
    prometheus:
      prometheusSpec:
        storageSpec:
          volumeClaimTemplate:
            spec:
              # Use EBS gp3 storage class
              storageClassName: gp3
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 50Gi
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 4Gi
    grafana:
      persistence:
        enabled: true
        storageClassName: gp3
        size: 10Gi

loki:
  sourceType: helmRepo
  enabled: true
  strategy: scalable
  values:
    # Use S3 for Loki storage instead of MinIO
    loki:
      storage:
        type: s3
        s3:
          endpoint: s3.amazonaws.com
          region: us-east-1  # Update to your region
          bucketnames: gamewarden-loki-storage  # Create this bucket
          insecure: false
          s3forcepathstyle: false
    # Disable MinIO since we're using S3
    minio:
      enabled: false
    write:
      replicas: 2
      persistence:
        storageClass: gp3
        size: 10Gi
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1000m
          memory: 2Gi
    read:
      replicas: 2
      persistence:
        storageClass: gp3
        size: 10Gi
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 1000m
          memory: 2Gi
    backend:
      replicas: 2
      persistence:
        storageClass: gp3
        size: 10Gi

promtail:
  sourceType: helmRepo
  enabled: true

kyverno:
  sourceType: helmRepo
  enabled: true

kyvernoPolicies:
  sourceType: helmRepo
  enabled: true
  values:
    policies:
      # More permissive for initial deployment
      restrict-volume-types:
        validationFailureAction: Audit
      restrict-image-registries:
        validationFailureAction: Audit
      restrict-host-path-write:
        validationFailureAction: Audit
      restrict-host-path-mount:
        validationFailureAction: Audit
      require-non-root-user:
        validationFailureAction: Audit
      require-non-root-group:
        validationFailureAction: Audit
      disallow-privileged-containers:
        validationFailureAction: Audit
      require-drop-all-capabilities:
        validationFailureAction: Audit

# SSO Configuration - Update these for your environment
sso:
  client_id: gamewarden-eks-client
  client_secret: "CHANGE_ME_TO_SECURE_SECRET"
  name: SSO
  url: https://login.gamewarden.eaglevalley.dev/auth/realms/gamewarden
  certificateAuthority:
    cert: |
      # Add your CA certificate here if using self-signed certs

# Grafana SSO Configuration
addons:
  grafana:
    grafana.ini:
      auth.generic_oauth:
        api_url: "https://login.gamewarden.eaglevalley.dev/auth/realms/gamewarden/protocol/openid-connect/userinfo"
        auth_url: "https://login.gamewarden.eaglevalley.dev/auth/realms/gamewarden/protocol/openid-connect/auth"
        client_id: "grafana-client"
        client_secret: "CHANGE_ME_TO_SECURE_SECRET"
        enabled: true
        groups_attribute_path: "groups"
        name: "Game Warden SSO"
        role_attribute_path: "contains(groups[*], '/Gamewarden/grafana-server-admin') && 'GrafanaAdmin' || contains(groups[*], '/Gamewarden/grafana-admin') && 'Admin' || 'Viewer'"
        role_attribute_strict: true
        scopes: "openid profile email grafana"
        token_url: "https://login.gamewarden.eaglevalley.dev/auth/realms/gamewarden/protocol/openid-connect/token"

  authservice:
    enabled: true
    chains:
      APP:
        callback_uri: https://APP.gw.eaglevalley.dev/oauth_callback
        client_id: il2_eb21db65-3118-4017-bfe7-86829038d3dc_apps
        client_secret: "123456789a"
        match:
          prefix: "APP.gw.eaglevalley.dev"
  argocd:
    enabled: true
    sso:
      client_id: "il2_eb21db65-3118-4017-bfe7-86829038d3dc_apps" #gitleaks:allow
      client_secret: "123456789a"
      enabled: true
    values:
      server:
        extraArgs:
        - --insecure
        - --repo-server-plaintext
      repoServer:
        extraArgs:
        - --disable-tls
      controller:
        extraArgs:
        - --repo-server-plaintext
      redis-bb:
        networkPolicy:
          enabled: false



  # Keycloak Configuration
  keycloak:
    sourceType: helmRepo
    enabled: true
    values:
      replicas: 2
      resources:
        requests:
          cpu: 500m
          memory: 1Gi
        limits:
          cpu: 2000m
          memory: 2Gi
      persistence:
        deployPostgres: true
      database:
        storageClass: gp3
        size: 20Gi
      volumeMounts:
        - mountPath: /opt/keycloak/data/import
          name: realm
      volumes:
        - name: realm
          configMap:
            name: gamewarden-realm
      # Update hostname for your domain
      hostname: gamewarden.eaglevalley.dev
      istio:
        enabled: true
        gateways:
          - istio-system/public
      domain: gamewarden.eaglevalley.dev
      extraInitContainers: |
        - name: import
          image: registry1.dso.mil/ironbank/opensource/keycloak/keycloak:25.0.6
          command:
            - /opt/keycloak/bin/kc.sh
            - import
            - --dir=/opt/keycloak/data/import
          volumeMounts:
            - mountPath: /opt/keycloak/data/import
              name: realm
      command:
        - /opt/keycloak/bin/kc.sh
        - start
        - --import-realm
      istioResources:
        virtualServices:
          - name: main
            port: 8443
            tls: true
        peerAuthentications:
          - name: keycloak
            mode: DISABLE
      extraEnvVars:
        - name: KEYCLOAK_PROXY_HEADERS
          value: xforwarded
        - name: KEYCLOAK_HOSTNAME_STRICT
          value: "false"
        - name: KEYCLOAK_HTTP_ENABLED
          value: "true"

    values:
      serviceAccount:
        automountServiceAccountToken: false
      replicas: 1
      args:
        - "start-dev"
        - --import-realm
      extraEnv: |-
        - name: KC_HTTPS_CLIENT_AUTH
          value: request
        - name: KC_HOSTNAME
          value: login.gw.eaglevalley.dev
        - name: KC_LOG_LEVEL
          value: "org.keycloak.events:DEBUG,org.infinispan:INFO,org.jgroups:INFO"
        - name: QUARKUS_HTTP_ACCESS_LOG_ENABLED
          value: "true"
        - name: KC_HOSTNAME_STRICT
          value: "false"
        - name: KC_HOSTNAME_STRICT_HTTPS
          value: "false"
        - name: KC_SPI_X509CERT_LOOKUP_PROVIDER
          value: nginx
        - name: KC_SPI_X509CERT_LOOKUP_NGINX_SSL_CLIENT_CERT
          value: istio-mtls-client-certificate
        - name: KC_SPI_X509CERT_LOOKUP_NGINX_SSL_CLIENT_CERT_CHAIN_PREFIX
          value: UNUSED
        - name: KC_PROXY_HEADERS
          value: xforwarded
        - name: KC_PROXY_ADDRESS_FORWARDING
          value: "true"
        - name: KC_HTTP_ENABLED
          value: "true"
        - name: QUANTUM_EMITTER_NATS_SERVER
          value: nats
      extraInitContainers: |-
        - name: plugin
          image: registry1.dso.mil/ironbank/big-bang/p1-keycloak-plugin:3.5.7
          command:
          - sh
          - -c
          - |
            cp /app/p1-keycloak-plugin.jar /init
            ls -l /init
          securityContext:
            capabilities:
              drop:
                - ALL
          volumeMounts:
          - name: plugin
            mountPath: "/init"
      extraPorts:
        - containerPort: 7800
          name: tcp
          protocol: TCP
        - containerPort: 57800
          name: tcp-fd
          protocol: TCP
      extraVolumeMounts: |-
        - name: plugin
          mountPath: /opt/keycloak/providers/p1-keycloak-plugin.jar
          subPath: p1-keycloak-plugin.jar
        - name: quarkusproperties
          mountPath: /opt/keycloak/conf/quarkus.properties
          subPath: quarkus.properties
        - name: realm
          mountPath: /opt/keycloak/data/import/realm.json
          subPath: realm.json
          readOnly: true
      extraVolumes: |-
        - name: plugin
          emptyDir: {}
        - name: quarkusproperties
          secret:
            secretName: keycloak-quarkusproperties
            defaultMode: 0777
        - name: realm
          configMap:
            name: gamewarden-realm
      hostname: gw.local
      istio:
        enabled: true
        keycloak:
          gateways:
            - istio-system/public
          hosts:
            - login.gw.local
      proxy:
        mode: xforwarded
      secrets:
        env:
          stringData:
            JAVA_OPTS_APPEND: -Djgroups.dns.query=keycloak-headless.keycloak.svc.cluster.local
        quarkusproperties:
          stringData:
            quarkus.properties: |-
              quarkus.http.non-application-root-path=/
              quarkus.kc-routing.path-redirect./=/auth/realms/gamewarden/account
              quarkus.kc-routing.path-redirect./auth=/auth/realms/gamewarden/account
              quarkus.kc-routing.path-redirect./register=/auth/realms/gamewarden/protocol/openid-connect/registrations?client_id=account&response_type=code
              quarkus.kc-routing.path-prefix./oauth/authorize=/auth/realms/gamewarden/protocol/openid-connect/auth
              quarkus.kc-routing.path-filter./api/v4/user=/auth/realms/gamewarden/protocol/openid-connect/userinfo
              quarkus.kc-routing.path-filter./oauth/token=/auth/realms/gamewarden/protocol/openid-connect/token
              quarkus.kc-routing.path-recursive-block./metrics=8443
              quarkus.kc-routing.path-recursive-block./health=8443
              quarkus.http.cors=true
              quarkus.http.cors.methods=OPTIONS,POST,GET,PATCH,PUT,DELETE
              quarkus.http.cors.headers=Content-Disposition,Access-Control-Allow-Headers,Content-Type,Authorization,X-Requested-With
              quarkus.http.cors.access-control-max-age=24H
              quarkus.http.cors.access-control-allow-credentials=true
              quarkus.http.cors.origins=*
      service:
        extraPorts: null
        httpPort: 8080



  metricsServer:
    sourceType: helmRepo
    enabled: auto
    values:
      args:
      - --kubelet-insecure-tls